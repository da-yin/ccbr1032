res <- results(dds)
ndata=as.data.frame(counts(dds,normalized=TRUE))
colnames(ndata)=colnames(filtered)
rn=rownames(ndata)
ensID=apply(array(as.character(rn)),1,function(z) unlist(strsplit(z, "\\|"))[1])
gene=apply(array(as.character(rn)),1,function(z) unlist(strsplit(z, "\\|"))[2])
mydata=cbind(ensID,gene,ndata)
print(head(mydata))
print(res)
dt.deseq2 <- as.numeric(res$padj<0.05)
print(head(dt.deseq2))
glMDPlot(res, status=dt.deseq2, counts=mydata, groups=x, side.main="Symbols", anno=mydata$gene)
res = data.frame(res)
colnames(res)[2] = "log2fc"
res$fdr=p.adjust(res$pvalue,method='fdr',n=length(res$pvalue))
res$gsea_ranking_score=-log10(res$pvalue)*sign(res$log2fc)
res$gene = gsub(".*[|]","", rownames(res))
res$fc = 2^res$log2fc
down_reg=res$log2fc<0
res$fc[down_reg]=-1/res$fc[down_reg]
res$ensid_gene = rownames(res)
res = res %>% dplyr::select(ensid_gene, gene, fc, log2fc, pvalue, fdr, gsea_ranking_score)
write.table(res,file=paste("processedData/DEGs/RUVseq_DEG_",limma_DEG, ".txt",sep=""),row.names=F,quote=FALSE,sep="\t")
}
myRUVseq(sample.dir = "SF417_Ola_Ctrl",limma_DEG = "Ola_417-Ctrl_417",number_of_genes_as_control = 1500)
myRUVseq = function(sample.dir, limma_DEG, number_of_genes_as_control){
x = read.table(paste0("~/Desktop/active_projects/ccbr1032/rawData/filteredCounts/",sample.dir,"/sampletable.txt"), stringsAsFactors = F, header = T)
x = as.factor(x$condition)
filtered = read.table(paste0("~/Desktop/active_projects/ccbr1032/rawData/filteredCounts/",sample.dir,"/filtered.txt"), stringsAsFactors = F, header = T)
deg = read.table(paste0("~/Desktop/active_projects/ccbr1032/analysis/processedData/DEGs/limma_DEG_", limma_DEG,"_all_genes.txt"), stringsAsFactors = F, header = T)
deg = deg[order(deg$pvalue, decreasing = T),]
control_genes = deg[1:number_of_genes_as_control,1]
for (i in 1:ncol(filtered)){
filtered[,i] = as.integer(filtered[,i])
}
set = newSeqExpressionSet(as.matrix(filtered),
phenoData = data.frame(x, row.names=colnames(filtered)))
set <- RUVg(set, control_genes, k=3)
colors <- brewer.pal(3, "Set2")
pdf(paste0("results/PCA_RUVseq_",limma_DEG,".pdf"))
plotPCA(set, col=colors[x], cex=0.6)
dev.off()
dds <- DESeqDataSetFromMatrix(countData = counts(set),
colData = pData(set),
design = ~ W_1 + x)
dds <- DESeq(dds)
res <- results(dds)
ndata=as.data.frame(counts(dds,normalized=TRUE))
colnames(ndata)=colnames(filtered)
rn=rownames(ndata)
ensID=apply(array(as.character(rn)),1,function(z) unlist(strsplit(z, "\\|"))[1])
gene=apply(array(as.character(rn)),1,function(z) unlist(strsplit(z, "\\|"))[2])
mydata=cbind(ensID,gene,ndata)
print(head(mydata))
print(res)
dt.deseq2 <- as.numeric(res$padj<0.05)
print(head(dt.deseq2))
glMDPlot(res, status=dt.deseq2, counts=mydata, groups=x, side.main="Symbols", anno=rownames(mydata))
res = data.frame(res)
colnames(res)[2] = "log2fc"
res$fdr=p.adjust(res$pvalue,method='fdr',n=length(res$pvalue))
res$gsea_ranking_score=-log10(res$pvalue)*sign(res$log2fc)
res$gene = gsub(".*[|]","", rownames(res))
res$fc = 2^res$log2fc
down_reg=res$log2fc<0
res$fc[down_reg]=-1/res$fc[down_reg]
res$ensid_gene = rownames(res)
res = res %>% dplyr::select(ensid_gene, gene, fc, log2fc, pvalue, fdr, gsea_ranking_score)
write.table(res,file=paste("processedData/DEGs/RUVseq_DEG_",limma_DEG, ".txt",sep=""),row.names=F,quote=FALSE,sep="\t")
}
myRUVseq(sample.dir = "SF417_Ola_Ctrl",limma_DEG = "Ola_417-Ctrl_417",number_of_genes_as_control = 1500)
myRUVseq = function(sample.dir, limma_DEG, number_of_genes_as_control){
x = read.table(paste0("~/Desktop/active_projects/ccbr1032/rawData/filteredCounts/",sample.dir,"/sampletable.txt"), stringsAsFactors = F, header = T)
x = as.factor(x$condition)
filtered = read.table(paste0("~/Desktop/active_projects/ccbr1032/rawData/filteredCounts/",sample.dir,"/filtered.txt"), stringsAsFactors = F, header = T)
deg = read.table(paste0("~/Desktop/active_projects/ccbr1032/analysis/processedData/DEGs/limma_DEG_", limma_DEG,"_all_genes.txt"), stringsAsFactors = F, header = T)
deg = deg[order(deg$pvalue, decreasing = T),]
control_genes = deg[1:number_of_genes_as_control,1]
for (i in 1:ncol(filtered)){
filtered[,i] = as.integer(filtered[,i])
}
set = newSeqExpressionSet(as.matrix(filtered),
phenoData = data.frame(x, row.names=colnames(filtered)))
set <- RUVg(set, control_genes, k=3)
colors <- brewer.pal(3, "Set2")
pdf(paste0("results/PCA_RUVseq_",limma_DEG,".pdf"))
plotPCA(set, col=colors[x], cex=0.6)
dev.off()
dds <- DESeqDataSetFromMatrix(countData = counts(set),
colData = pData(set),
design = ~ W_1 + x)
dds <- DESeq(dds)
res <- results(dds)
ndata=as.data.frame(counts(dds,normalized=TRUE))
colnames(ndata)=colnames(filtered)
rn=rownames(ndata)
ensID=apply(array(as.character(rn)),1,function(z) unlist(strsplit(z, "\\|"))[1])
gene=apply(array(as.character(rn)),1,function(z) unlist(strsplit(z, "\\|"))[2])
mydata=cbind(ensID,gene,ndata)
print(head(mydata))
print(res)
res = data.frame(res)
colnames(res)[2] = "log2fc"
res$fdr=p.adjust(res$pvalue,method='fdr',n=length(res$pvalue))
res$gsea_ranking_score=-log10(res$pvalue)*sign(res$log2fc)
res$gene = gsub(".*[|]","", rownames(res))
res$fc = 2^res$log2fc
down_reg=res$log2fc<0
res$fc[down_reg]=-1/res$fc[down_reg]
res$ensid_gene = rownames(res)
res = res %>% dplyr::select(ensid_gene, gene, fc, log2fc, pvalue, fdr, gsea_ranking_score)
dt.deseq2 <- as.numeric(res$fdr<0.05)
print(head(dt.deseq2))
glMDPlot(res, status=dt.deseq2, counts=mydata, groups=x, side.main="Symbols", anno=rownames(res))
write.table(res,file=paste("processedData/DEGs/RUVseq_DEG_",limma_DEG, ".txt",sep=""),row.names=F,quote=FALSE,sep="\t")
}
myRUVseq(sample.dir = "SF417_Ola_Ctrl",limma_DEG = "Ola_417-Ctrl_417",number_of_genes_as_control = 1500)
myRUVseq = function(sample.dir, limma_DEG, number_of_genes_as_control){
x = read.table(paste0("~/Desktop/active_projects/ccbr1032/rawData/filteredCounts/",sample.dir,"/sampletable.txt"), stringsAsFactors = F, header = T)
x = as.factor(x$condition)
filtered = read.table(paste0("~/Desktop/active_projects/ccbr1032/rawData/filteredCounts/",sample.dir,"/filtered.txt"), stringsAsFactors = F, header = T)
deg = read.table(paste0("~/Desktop/active_projects/ccbr1032/analysis/processedData/DEGs/limma_DEG_", limma_DEG,"_all_genes.txt"), stringsAsFactors = F, header = T)
deg = deg[order(deg$pvalue, decreasing = T),]
control_genes = deg[1:number_of_genes_as_control,1]
for (i in 1:ncol(filtered)){
filtered[,i] = as.integer(filtered[,i])
}
set = newSeqExpressionSet(as.matrix(filtered),
phenoData = data.frame(x, row.names=colnames(filtered)))
set <- RUVg(set, control_genes, k=3)
colors <- brewer.pal(3, "Set2")
pdf(paste0("results/PCA_RUVseq_",limma_DEG,".pdf"))
plotPCA(set, col=colors[x], cex=0.6)
dev.off()
dds <- DESeqDataSetFromMatrix(countData = counts(set),
colData = pData(set),
design = ~ W_1 + x)
dds <- DESeq(dds)
res <- results(dds)
ndata=as.data.frame(counts(dds,normalized=TRUE))
colnames(ndata)=colnames(filtered)
rn=rownames(ndata)
ensID=apply(array(as.character(rn)),1,function(z) unlist(strsplit(z, "\\|"))[1])
gene=apply(array(as.character(rn)),1,function(z) unlist(strsplit(z, "\\|"))[2])
mydata=cbind(ensID,gene,ndata)
print(head(mydata))
print(res)
res = data.frame(res)
colnames(res)[2] = "log2fc"
res$fdr=p.adjust(res$pvalue,method='fdr',n=length(res$pvalue))
res$gsea_ranking_score=-log10(res$pvalue)*sign(res$log2fc)
res$gene = gsub(".*[|]","", rownames(res))
res$fc = 2^res$log2fc
down_reg=res$log2fc<0
res$fc[down_reg]=-1/res$fc[down_reg]
res$ensid_gene = rownames(res)
res = res %>% dplyr::select(ensid_gene, gene, fc, log2fc, pvalue, fdr, gsea_ranking_score)
dt.deseq2 <- as.numeric(res$fdr<0.05)
print(head(dt.deseq2))
print(head(rownames(res)))
print(x)
glMDPlot(res, status=dt.deseq2, counts=mydata, groups=x, side.main="Symbols", anno=rownames(res))
write.table(res,file=paste("processedData/DEGs/RUVseq_DEG_",limma_DEG, ".txt",sep=""),row.names=F,quote=FALSE,sep="\t")
}
myRUVseq(sample.dir = "SF417_Ola_Ctrl",limma_DEG = "Ola_417-Ctrl_417",number_of_genes_as_control = 1500)
myRUVseq = function(sample.dir, limma_DEG, number_of_genes_as_control){
x = read.table(paste0("~/Desktop/active_projects/ccbr1032/rawData/filteredCounts/",sample.dir,"/sampletable.txt"), stringsAsFactors = F, header = T)
x = as.factor(x$condition)
filtered = read.table(paste0("~/Desktop/active_projects/ccbr1032/rawData/filteredCounts/",sample.dir,"/filtered.txt"), stringsAsFactors = F, header = T)
deg = read.table(paste0("~/Desktop/active_projects/ccbr1032/analysis/processedData/DEGs/limma_DEG_", limma_DEG,"_all_genes.txt"), stringsAsFactors = F, header = T)
deg = deg[order(deg$pvalue, decreasing = T),]
control_genes = deg[1:number_of_genes_as_control,1]
for (i in 1:ncol(filtered)){
filtered[,i] = as.integer(filtered[,i])
}
set = newSeqExpressionSet(as.matrix(filtered),
phenoData = data.frame(x, row.names=colnames(filtered)))
set <- RUVg(set, control_genes, k=3)
colors <- brewer.pal(3, "Set2")
pdf(paste0("results/PCA_RUVseq_",limma_DEG,".pdf"))
plotPCA(set, col=colors[x], cex=0.6)
dev.off()
dds <- DESeqDataSetFromMatrix(countData = counts(set),
colData = pData(set),
design = ~ W_1 + x)
dds <- DESeq(dds)
res <- results(dds)
ndata=as.data.frame(counts(dds,normalized=TRUE))
colnames(ndata)=colnames(filtered)
rn=rownames(ndata)
ensID=apply(array(as.character(rn)),1,function(z) unlist(strsplit(z, "\\|"))[1])
gene=apply(array(as.character(rn)),1,function(z) unlist(strsplit(z, "\\|"))[2])
mydata=cbind(ensID,gene,ndata)
print(head(mydata))
print(res)
res = data.frame(res)
colnames(res)[2] = "log2fc"
res$fdr=p.adjust(res$pvalue,method='fdr',n=length(res$pvalue))
res$gsea_ranking_score=-log10(res$pvalue)*sign(res$log2fc)
res$gene = gsub(".*[|]","", rownames(res))
res$fc = 2^res$log2fc
down_reg=res$log2fc<0
res$fc[down_reg]=-1/res$fc[down_reg]
res$ensid_gene = rownames(res)
res = res %>% dplyr::select(ensid_gene, gene, fc, log2fc, pvalue, fdr, gsea_ranking_score)
dt.deseq2 <- as.numeric(res$fdr<0.05)
print(res$fdr)
print(head(dt.deseq2))
print(head(rownames(res)))
print(x)
glMDPlot(res, status=dt.deseq2, counts=mydata, groups=x, side.main="Symbols", anno=rownames(res))
write.table(res,file=paste("processedData/DEGs/RUVseq_DEG_",limma_DEG, ".txt",sep=""),row.names=F,quote=FALSE,sep="\t")
}
myRUVseq(sample.dir = "SF417_LMP_Ctrl",limma_DEG = "LMP_417-Ctrl_417",number_of_genes_as_control = 1500)
myRUVseq = function(sample.dir, limma_DEG, number_of_genes_as_control){
x = read.table(paste0("~/Desktop/active_projects/ccbr1032/rawData/filteredCounts/",sample.dir,"/sampletable.txt"), stringsAsFactors = F, header = T)
x = as.factor(x$condition)
filtered = read.table(paste0("~/Desktop/active_projects/ccbr1032/rawData/filteredCounts/",sample.dir,"/filtered.txt"), stringsAsFactors = F, header = T)
deg = read.table(paste0("~/Desktop/active_projects/ccbr1032/analysis/processedData/DEGs/limma_DEG_", limma_DEG,"_all_genes.txt"), stringsAsFactors = F, header = T)
deg = deg[order(deg$pvalue, decreasing = T),]
control_genes = deg[1:number_of_genes_as_control,1]
for (i in 1:ncol(filtered)){
filtered[,i] = as.integer(filtered[,i])
}
set = newSeqExpressionSet(as.matrix(filtered),
phenoData = data.frame(x, row.names=colnames(filtered)))
set <- RUVg(set, control_genes, k=3)
colors <- brewer.pal(3, "Set2")
pdf(paste0("results/PCA_RUVseq_",limma_DEG,".pdf"))
plotPCA(set, col=colors[x], cex=0.6)
dev.off()
dds <- DESeqDataSetFromMatrix(countData = counts(set),
colData = pData(set),
design = ~ W_1 + x)
dds <- DESeq(dds)
res <- results(dds)
ndata=as.data.frame(counts(dds,normalized=TRUE))
colnames(ndata)=colnames(filtered)
rn=rownames(ndata)
ensID=apply(array(as.character(rn)),1,function(z) unlist(strsplit(z, "\\|"))[1])
gene=apply(array(as.character(rn)),1,function(z) unlist(strsplit(z, "\\|"))[2])
mydata=cbind(ensID,gene,ndata)
print(head(mydata))
print(res$pvalue)
res = data.frame(res)
colnames(res)[2] = "log2fc"
res$fdr=p.adjust(res$pvalue,method='fdr',n=length(res$pvalue))
res$gsea_ranking_score=-log10(res$pvalue)*sign(res$log2fc)
res$gene = gsub(".*[|]","", rownames(res))
res$fc = 2^res$log2fc
down_reg=res$log2fc<0
res$fc[down_reg]=-1/res$fc[down_reg]
res$ensid_gene = rownames(res)
res = res %>% dplyr::select(ensid_gene, gene, fc, log2fc, pvalue, fdr, gsea_ranking_score)
dt.deseq2 <- as.numeric(res$fdr<0.05)
print(head(dt.deseq2))
print(head(rownames(res)))
print(x)
glMDPlot(res, status=dt.deseq2, counts=mydata, groups=x, side.main="Symbols", anno=rownames(res))
write.table(res,file=paste("processedData/DEGs/RUVseq_DEG_",limma_DEG, ".txt",sep=""),row.names=F,quote=FALSE,sep="\t")
}
myRUVseq(sample.dir = "SF417_LMP_Ctrl",limma_DEG = "LMP_417-Ctrl_417",number_of_genes_as_control = 1500)
myRUVseq(sample.dir = "SF417_LMP_Ctrl",limma_DEG = "LMP_417-Ctrl_417",number_of_genes_as_control = 1500)
myRUVseq = function(sample.dir, limma_DEG, number_of_genes_as_control){
x = read.table(paste0("~/Desktop/active_projects/ccbr1032/rawData/filteredCounts/",sample.dir,"/sampletable.txt"), stringsAsFactors = F, header = T)
x = as.factor(x$condition)
filtered = read.table(paste0("~/Desktop/active_projects/ccbr1032/rawData/filteredCounts/",sample.dir,"/filtered.txt"), stringsAsFactors = F, header = T)
deg = read.table(paste0("~/Desktop/active_projects/ccbr1032/analysis/processedData/DEGs/limma_DEG_", limma_DEG,"_all_genes.txt"), stringsAsFactors = F, header = T)
deg = deg[order(deg$pvalue, decreasing = T),]
control_genes = deg[1:number_of_genes_as_control,1]
for (i in 1:ncol(filtered)){
filtered[,i] = as.integer(filtered[,i])
}
set = newSeqExpressionSet(as.matrix(filtered),
phenoData = data.frame(x, row.names=colnames(filtered)))
set <- RUVg(set, control_genes, k=3)
colors <- brewer.pal(3, "Set2")
pdf(paste0("results/PCA_RUVseq_",limma_DEG,".pdf"))
plotPCA(set, col=colors[x], cex=0.6)
dev.off()
dds <- DESeqDataSetFromMatrix(countData = counts(set),
colData = pData(set),
design = ~ W_1 + x)
dds <- DESeq(dds)
res <- results(dds)
#normalized counts
ndata=as.data.frame(counts(dds,normalized=TRUE))
colnames(ndata)=colnames(filtered)
rn=rownames(ndata)
ensID=apply(array(as.character(rn)),1,function(z) unlist(strsplit(z, "\\|"))[1])
gene=apply(array(as.character(rn)),1,function(z) unlist(strsplit(z, "\\|"))[2])
mydata=cbind(ensID,gene,ndata)
#reformat DEG table
res = data.frame(res)
colnames(res)[2] = "log2fc"
res$fdr=p.adjust(res$pvalue,method='fdr',n=length(res$pvalue))
res$gsea_ranking_score=-log10(res$pvalue)*sign(res$log2fc)
res$gene = gsub(".*[|]","", rownames(res))
res$fc = 2^res$log2fc
down_reg=res$log2fc<0
res$fc[down_reg]=-1/res$fc[down_reg]
res$ensid_gene = rownames(res)
res = res %>% dplyr::select(ensid_gene, gene, fc, log2fc, pvalue, fdr, gsea_ranking_score)
write.table(res,file=paste("processedData/DEGs/RUVseq_DEG_",limma_DEG, ".txt",sep=""),row.names=F,quote=FALSE,sep="\t")
}
myRUVseq(sample.dir = "SF417_Treated_Ctrl",limma_DEG = "treated_417-Ctrl_417",number_of_genes_as_control = 1500)
myRUVseq(sample.dir = "SF417_Ola_Ctrl",limma_DEG = "Ola_417-Ctrl_417",number_of_genes_as_control = 1500)
myRUVseq(sample.dir = "SF417_LMP_Ctrl",limma_DEG = "LMP_417-Ctrl_417",number_of_genes_as_control = 1500)
myRUVseq(sample.dir = "SF417_LMP.Olap_Ola",limma_DEG = "LMP.Olap_417-Ola_417",number_of_genes_as_control = 1500)
myRUVseq(sample.dir = "SF417_LMP.Olap_LMP",limma_DEG = "LMP.Olap_417-LMP_417",number_of_genes_as_control = 1500)
myRUVseq(sample.dir = "SF417_LMP.Olap_Ctrl",limma_DEG = "LMP.Olap_417-LMP_417",number_of_genes_as_control = 1500)
myRUVseq(sample.dir = "SF417_Treated_Ctrl",limma_DEG = "treated_417-Ctrl_417",number_of_genes_as_control = 1500)
myRUVseq(sample.dir = "SF417_Ola_Ctrl",limma_DEG = "Ola_417-Ctrl_417",number_of_genes_as_control = 1500)
myRUVseq(sample.dir = "SF417_LMP_Ctrl",limma_DEG = "LMP_417-Ctrl_417",number_of_genes_as_control = 1500)
myRUVseq(sample.dir = "SF417_LMP.Olap_Ola",limma_DEG = "LMP.Olap_417-Ola_417",number_of_genes_as_control = 1500)
myRUVseq(sample.dir = "SF417_LMP.Olap_LMP",limma_DEG = "LMP.Olap_417-LMP_417",number_of_genes_as_control = 1500)
myRUVseq(sample.dir = "SF417_LMP.Olap_Ctrl",limma_DEG = "LMP.Olap_417-Ctrl_417",number_of_genes_as_control = 1500)
myRUVseq(sample.dir = "GSC827_Treated_Ctrl",limma_DEG = "treated_827-Ctrl_827",number_of_genes_as_control = 3000)
myRUVseq(sample.dir = "GSC827_Ola_Ctrl",limma_DEG = "Ola_827-Ctrl_827",number_of_genes_as_control = 3000)
myRUVseq(sample.dir = "GSC827_LMP_Ctrl",limma_DEG = "LMP_827-Ctrl_827",number_of_genes_as_control = 3000)
myRUVseq(sample.dir = "GSC827_LMP.Olap_Ola",limma_DEG = "LMP.Olap_827-Ola_827",number_of_genes_as_control = 3000)
myRUVseq(sample.dir = "GSC827_LMP.Olap_LMP",limma_DEG = "LMP.Olap_827-LMP_827",number_of_genes_as_control = 3000)
myRUVseq(sample.dir = "GSC827_LMP.Olap_Ctrl",limma_DEG = "LMP.Olap_827-Ctrl_827",number_of_genes_as_control = 3000)
my_files = list.files(path = DEGs_dir)
my_degs <- list()
for (i in my_files){
print(i)
my_degs[[i]] <- read.table(paste(DEGs_dir,i,sep = "/"),header = TRUE,sep='\t')
my_degs[[i]]$ensid_gene <- gsub('\\..*','', my_degs[[i]]$ensid_gene)
}
names(my_degs) <- stringr::str_replace(my_files, pattern = "_all_genes.txt", replacement = "") %>%
stringr::str_replace(pattern = "limma_DEG_", replacement = "") %>% stringr::str_replace(pattern = "RUVseq_DEG_", replacement = "")%>%
stringr::str_replace(pattern = ".txt", replacement = "")
my_sig_degs = lapply(my_degs, function(x) subset(x, fdr < 0.05 & abs(fc) > 2))
my_degs_rankingScoresList <- lapply(my_degs, function(x){
scores <- x$gsea_ranking_score
names(scores) <- as.character(x$ensid_gene)
scores <- sort(scores, decreasing = T)
})
my_genes = data.frame()
for (x in my_degs) {
temp_genes = x[, c("ensid_gene", "gene")]
my_genes = dplyr::bind_rows(my_genes, temp_genes)
my_genes = my_genes[!(duplicated(my_genes$ensid_gene)),]
}
Entrez_from_ensembl <- bitr(my_genes$ensid_gene, fromType = "ENSEMBL", toType = "ENTREZID", OrgDb = org.Hs.eg.db)
colnames(Entrez_from_ensembl)[colnames(Entrez_from_ensembl)=="ENSEMBL"] <- "ensid_gene"
unmapped_ensid <- my_genes[!(my_genes$ensid_gene%in%Entrez_from_ensembl$ensid_gene),]
unmapped_ensid <- unmapped_ensid[!duplicated(unmapped_ensid$gene),]
ensid_symbol.data <- bitr(unique(unmapped_ensid$gene), fromType = "SYMBOL", toType = "ENTREZID", OrgDb = org.Hs.eg.db)
ensid_symbol.data <- ensid_symbol.data[!duplicated(ensid_symbol.data$SYMBOL),]
ensid_symbol_unmapped_ensid.data <- unmapped_ensid[(unmapped_ensid$gene%in%ensid_symbol.data$SYMBOL),]
Entrez_from_symbol = cbind(ensid_symbol_unmapped_ensid.data, ensid_symbol.data)
Entrez_from_symbol = Entrez_from_symbol[c("ensid_gene", "ENTREZID")]
Entrez_all <- dplyr::bind_rows(Entrez_from_ensembl, Entrez_from_symbol)
Entrez_unmapped = setdiff(my_genes$ensid_gene, Entrez_all$ensid_gene)
paste("Out of all", length(my_genes$ensid_gene), "DEGs:", length(Entrez_from_ensembl$ENTREZID), "were mapped to Entrez using Ensemble ID,", length(Entrez_from_symbol$ENTREZID), "mapped using gene symbol,", length(setdiff(my_genes$ensid_gene, Entrez_all$ensid_gene)), "cannot be mapped.")
my_degs_entrez = lapply(my_degs, function(x){
result <- merge(x, Entrez_all, by="ensid_gene") #adding a entrez column
})
my_sig_degs_entrez = lapply(my_degs_entrez, function(x) subset(x, fdr < 0.05 & abs(fc) > 2))
my_degs_entrez_rankingScoresList <- lapply(my_degs_entrez, function(x){
scores <- x$gsea_ranking_score
names(scores) <- as.character(x$ENTREZID)
scores <- sort(scores, decreasing = T)
})
myVolcanos = lapply(my_degs, function(x){
EnhancedVolcano(x,
lab = x$gene,x = "log2fc", y = "fdr", ylab = bquote(~-Log[10]~FDR),FCcutoff = 1,
ylim= c(0, max(-log10(x$fdr), na.rm=TRUE) + 1),pCutoff = 0.05,
legendPosition = 'top',titleLabSize = 22, subtitleLabSize = 20,
captionLabSize= 18,
pointSize = 0.8,labSize = 4.5,legendLabSize = 18,
legendIconSize = 4,legend = c("NS","log2FC > |1|","FDR < 0.05",
"significant (FDR < 0.05) & log2FC > |1|"))
})
volcanos = list()
for (i in 1:length(my_degs)){
print(myVolcanos[[i]] + ggtitle(paste(names(myVolcanos[i]))))
myVolcanos[[i]] + ggtitle(paste(names(myVolcanos[i])))
}
for (i in 1:length(my_degs)){
pdf(paste(results_dir, "volcano_", names(myVolcanos[i]), ".pdf", sep = ""), width = 11, height = 10)
print(myVolcanos[[i]] + ggtitle(paste(names(myVolcanos[i]))))
dev.off()
}
for (i in 1: length(my_degs)){
print(paste("Number of DEGS in",names(my_sig_degs[i]), ":", length(my_sig_degs[[i]]$gene), sep=" "))
}
#' Truncate string vector of ggplot axis label
#'
#' @param label    a ordered string vector
#' @param maxLen   max length of character (nchar) to show in label
#' @param maxWord  max count of words allowed to show in label
#' @param pattern  Word separater
#' @param dot      If true, three dots will added to truncated label
#'
#' @return a vector of truncated strings
#' @export
#'
#' @examples
short_label <- function(label, maxLen = 50, maxWord = 10, pattern = " ", dot = TRUE){
l <- strsplit(label, pattern)
short_label <- vector("character",length(l))
for (i in seq_along(l)){
truncated <- FALSE
s <- l[[i]]
if (length(s) > maxWord){
ll <- paste(s[1:maxWord], collapse = " ")
truncated <- TRUE
}
else{
ll <- paste(s, collapse = " ")
}
if (nchar(ll) > maxLen){
ll <- substr(ll, 1, maxLen)
truncated <- TRUE
}
if (dot & truncated) ll <- paste(ll, "...",sep = " ")
short_label[[i]] <- ll
}
attr(short_label, "pos") <- attr(label,"pos")
return(short_label)
}
#' Truncate string vector of ggplot axis label
#'
#' @param label    a ordered string vector
#' @param maxLen   max length of character (nchar) to show in label
#' @param maxWord  max count of words allowed to show in label
#' @param pattern  Word separater
#' @param dot      If true, three dots will added to truncated label
#'
#' @return a vector of truncated strings
#' @export
#'
#' @examples
short_label <- function(label, maxLen = 50, maxWord = 10, pattern = " ", dot = TRUE){
l <- strsplit(label, pattern)
short_label <- vector("character",length(l))
for (i in seq_along(l)){
truncated <- FALSE
s <- l[[i]]
if (length(s) > maxWord){
ll <- paste(s[1:maxWord], collapse = " ")
truncated <- TRUE
}
else{
ll <- paste(s, collapse = " ")
}
if (nchar(ll) > maxLen){
ll <- substr(ll, 1, maxLen)
truncated <- TRUE
}
if (dot & truncated) ll <- paste(ll, "...",sep = " ")
short_label[[i]] <- ll
}
attr(short_label, "pos") <- attr(label,"pos")
return(short_label)
}
myBP_gsea = lapply(my_degs_rankingScoresList, function(x){
gseGO(geneList = x, OrgDb = org.Hs.eg.db, ont = "BP", nPerm = 30000, keyType = "ENSEMBL",
minGSSize = 10, maxGSSize = 500, pvalueCutoff = 0.05, pAdjustMethod = "BH",
verbose = TRUE)})
for (i in 1:length(myBP_gsea)){
if (length(myBP_gsea[[i]]@result$ID)>0){
dot.plot =
dotplot(myBP_gsea[[i]], showCategory=10, split=".sign") + facet_grid(.~.sign)+
ggtitle(paste(names(myBP_gsea[i]),"BP GSEA", sep = " ")) +
scale_y_discrete(label=short_label)
#ggsave(filename = paste0("processedData/ORA_GSEA/", "myBP_gsea_", ,names(myBP_gsea[i]), ".pdf"),plot =  dot.plot,)
pdf(file = paste0("processedData/ORA_GSEA/", "myBP_gsea_", names(myBP_gsea[i]), ".pdf"), width = 10)
print(dot.plot)
dev.off()
}
}
for (i in 1:length(myBP_gsea)){
myBP_gsea[[i]] = setReadable(myBP_gsea[[i]], 'org.Hs.eg.db', 'ENSEMBL')
writeFile(myBP_gsea[[i]], paste0("myBP_gsea_",names(myBP_gsea[i]),".csv"))
}
myKEGG_gsea <- lapply(my_degs_entrez_rankingScoresList, function(x){
gseKEGG(geneList = x, organism = 'hsa', nPerm = 30000,minGSSize = 10, maxGSSize = 500, pvalueCutoff = 0.05, pAdjustMethod = "BH", verbose = TRUE)})
dotplot(myKEGG_gsea[[3]], showCategory=10, split=".sign") + facet_grid(.~.sign)+ ggtitle(paste(names(myKEGG_gsea[3]),"Gene set enrichment analysis", sep = " ")) + scale_y_discrete(label=short_label)
for (i in 1:length(myKEGG_gsea)){
myKEGG_gsea[[i]] = setReadable(myKEGG_gsea[[i]], 'org.Hs.eg.db', 'ENTREZID')
writeFile(myKEGG_gsea[[i]], paste0("myKEGG_gsea_",names(myKEGG_gsea[i]),".csv"))
if (length(myKEGG_gsea[[i]]@result$ID)>0){
dot.plot =
dotplot(myKEGG_gsea[[i]], showCategory=10, split=".sign") + facet_grid(.~.sign)+
ggtitle(paste(names(myKEGG_gsea[i]),"KEGG GSEA", sep = " ")) +
scale_y_discrete(label=short_label)
pdf(file = paste0("processedData/ORA_GSEA/", "myKEGG_gsea_", names(myKEGG_gsea[i]), ".pdf"), width = 10)
print(dot.plot)
dev.off()
}
}
myReactome_gsea <- lapply(my_degs_entrez_rankingScoresList, function(x){
gsePathway(geneList = x, organism = 'human', nPerm = 30000, minGSSize = 10, maxGSSize = 500, pvalueCutoff = 0.05, pAdjustMethod = "BH", verbose = TRUE)})
for (i in 1:length(myReactome_gsea)){
myReactome_gsea[[i]] = setReadable(myReactome_gsea[[i]], 'org.Hs.eg.db', 'ENTREZID')
writeFile(myReactome_gsea[[i]], paste0("myReactome_gsea_",names(myReactome_gsea[i]),".csv"))
if (length(myReactome_gsea[[i]]@result$ID)>0){
dot.plot =
dotplot(myReactome_gsea[[i]], showCategory=10, split=".sign") + facet_grid(.~.sign)+
ggtitle(paste(names(myReactome_gsea[i]),"Reactome GSEA", sep = " ")) +
scale_y_discrete(label=short_label)
pdf(file = paste0("processedData/ORA_GSEA/", "myReactome_gsea_", names(myReactome_gsea[i]), ".pdf"), width = 10)
print(dot.plot)
dev.off()
}
}
myKEGG_gsea <- lapply(my_degs_entrez_rankingScoresList, function(x){
gseKEGG(geneList = x, organism = 'hsa', nPerm = 30000,minGSSize = 10, maxGSSize = 500, pvalueCutoff = 0.05, pAdjustMethod = "BH", verbose = TRUE)})
